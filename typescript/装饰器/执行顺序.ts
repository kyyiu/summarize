// 首先，根据书写先后，顺序执行实例成员（即prototype）上的所有装饰器。对于同一方法来说，一定是先应用参数装饰器，再应用方法装饰器（参数装饰器 -> 方法 / 访问器 / 属性 装饰器）
// 执行静态成员上的所有装饰器，顺序与上一条一致（参数装饰器 -> 方法 / 访问器 / 属性 装饰器）
// 执行构造方法上的所有装饰器（参数装饰器 -> 类装饰器）

function fn(str: string) {
  console.log("求值装饰器：", str);
  return function () {
    console.log("应用装饰器：", str);
  };
}

@fn("类装饰器")
class T {
  constructor(@fn("类参数装饰器") foo: any) {}

  @fn("静态属性装饰器")
  static a: any;
  @fn("属性装饰器")
  b: any;

  @fn("方法装饰器")
  methodA(@fn("方法参数装饰器") foo: any) {}

  @fn("静态方法装饰器")
  static methodB(@fn("静态方法参数装饰器") foo: any) {}
  @fn("访问器装饰器")
  set C(@fn("访问器参数装饰器") foo: any) {}

  @fn("静态访问器装饰器")
  static set D(@fn("静态访问器参数装饰器") foo: any) {}
}

// 求值装饰器： 属性装饰器
// 应用装饰器： 属性装饰器
// 求值装饰器： 方法装饰器
// 求值装饰器： 方法参数装饰器
// 应用装饰器： 方法参数装饰器
// 应用装饰器： 方法装饰器
// 求值装饰器： 访问器装饰器
// 求值装饰器： 访问器参数装饰器
// 应用装饰器： 访问器参数装饰器
// 应用装饰器： 访问器装饰器

// 求值装饰器： 静态属性装饰器
// 应用装饰器： 静态属性装饰器
// 求值装饰器： 静态方法装饰器
// 求值装饰器： 静态方法参数装饰器
// 应用装饰器： 静态方法参数装饰器
// 应用装饰器： 静态方法装饰器
// 求值装饰器： 静态访问器装饰器
// 求值装饰器： 静态访问器参数装饰器
// 应用装饰器： 静态访问器参数装饰器
// 应用装饰器： 静态访问器装饰器

// 求值装饰器： 类装饰器
// 求值装饰器： 类参数装饰器
// 应用装饰器： 类参数装饰器
// 应用装饰器： 类装饰器