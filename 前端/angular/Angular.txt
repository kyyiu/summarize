它是一个js框架，通过指令扩展html，且通过表达式绑定数据到html
它通过ng-directives扩展html
ng-app指令定义一个agularjs应用程序
	ng-app 指令用于告诉 AngularJS 应用当前这个元素是根元素。
	所有 AngularJS 应用都必须要要一个根元素。
	HTML 文档中只允许有一个 ng-app 指令，如果有多个 ng-app 指令，则只有第一个会被使用。
	当我们为ng-app赋值时，我们要在js中声明这个模块。
	使用angular.module("赋的值",[]);
ng-model把元素值（比如输入域的值）绑定到应用程序
ng-bind把应用程序数据绑定到html视图

什么是angularjs
它使得开发现代的单一页面应用程序SPAs变得更加容易
把应用程序数据绑定到html元素
可以克隆和重复html元素
可以隐藏和显示html元素
可以在html元素背后添加代码
支持输入验证

Ag指令是以ng作为前缀的html属性
ng-init指令初始化ag应用程序变量
例子
<div ng-app="" ng-init="name='HH'">
	<p>名字是<span ng-bind="name"></span></p>
</div>

h5允许扩展的属性，以data-开头
angualrjs属性以ng-开头，但是可以使用data-ng-来让网页对h5有效

表达式
表达式卸载双大括号内: {{expression}}
表达式把数据绑定到html，这与ng-bind指令有异曲同工之妙
将表达式书写的位置输出数据
ag表达式很像js表达式，同名可以包含文字，运算符和变量
实例{{5+5}}或者{{fn+ln}}

ag应用
模块(Module)定义了AngularJS应用
控制器（Controller）用于控制AngularJs应用
ng-app指令指明了应用，ng-controller指明了控制器

ag指令
通过指令的新属性来扩展html
通过内置的指令来为应用添加功能
允许自定义指令

重复html元素
ng-repeat指令会重复一个html元素
<li ng-repeat="x in names track by $index">
<button ng-click="delPerson($index)">
track by $index类似v-for中的key

ng-model指令绑定html元素到应用程序数据
它也可以为应用程序数据提供类型验证(number,email,required)
为应用程序数据提供状态(invalid,dirty,touched,error)
为html元素提供css类
绑定html元素到html表单

创建自定义指令
可以使用.directive函数来添加自定义的指令
要调用自定义指令，html元素上需要添加自定义指令名
使用驼峰法来命名一个指令，runoobDirective,但在使用它时需要以-分割,runoob-drective:
可以通过以下方式调用指令
1.元素名
2.属性
3.类名
4.注释
<!-- 1通过元素名使用 -->
<runoob-directive></runoob-directive>
<!-- 2通过属性使用 -->
<div runoob-directive></div>
<!-- 3.通过类名使用 -->
<div class="runoob-directive"></div>
<!-- 4.通过注释使用 -->
<!-- directive: runoob-directive -->

限制使用
通过添加restrict属性，
var app = angular.module("myApp", []);
app.directive("runoobDirective", function() {
    return {
        restrict : "A",
        template : "<h1>自定义指令!</h1>"
    };
});
restrict 值可以是以下几种:
E = Element, A = Attribute, C = Class, M = Comment
E 作为元素名使用
A 作为属性使用
C 作为类名使用
M 作为注释使用
restrict 默认值为 EA, 即可以通过元素名和属性名来调用指令。
使用M的时候还有添加replace属性为true，默认值为false 当为true是直接替换指令所在的标签

ng-model指令用于绑定应用程序数据到html控制器(input,select,textarea)的值
ng-model指令可以将输入域的值于ag创建的变量绑定
var app = angular.module("myApp", []);
app.controller('myCtrl', function($scope){
	$scope.name = 'HH'
})

双向绑定
<div ng-app="myApp" ng-controller="myCtrl">
    名字: <input ng-model="name">
    <h1>你输入了: {{name}}</h1>
</div>

验证用户输入
<form ng-app="" name="myForm">
    Email:
    <input type="email" name="myAddress" ng-model="text">
    <span ng-show="myForm.myAddress.$error.email">不是一个合法的邮箱地址</span>
</form>

应用状态
<form ng-app="" name="myForm" ng-init="myText = 'test@runoob.com'">
 
Email:
<input type="email" name="myAddress" ng-model="myText" required>
<p>编辑邮箱地址，查看状态的改变。</p>
<h1>状态</h1>
<p>Valid: {{myForm.myAddress.$valid}} (如果输入的值是合法的则为 true)。</p>
<p>Dirty: {{myForm.myAddress.$dirty}} (如果值改变则为 true)。</p>
<p>Touched: {{myForm.myAddress.$touched}} (如果通过触屏点击则为 true)。</p>

CSS 类
ng-model 指令基于它们的状态为 HTML 元素提供了 CSS 类：
<style>
input.ng-invalid {
    background-color: lightblue;
}
</style>
<body>

<form ng-app="" name="myForm">
    输入你的名字:
    <input name="myAddress" ng-model="text" required>
</form>

ng-model 指令根据表单域的状态添加/移除以下类：
ng-valid: 验证通过
ng-invalid: 验证失败
ng-valid-[key]: 由$setValidity添加的所有验证通过的值
ng-invalid-[key]: 由$setValidity添加的所有验证失败的值
ng-pristine: 控件为初始状态
ng-dirty: 控件输入值已变更
ng-touched: 控件已失去焦点
ng-untouched: 控件未失去焦点
ng-pending: 任何为满足$asyncValidators的情况

Scope作用域
是应用于html(视图)和js(控制器)之间的纽带
scope是一个对象，有可用的方法和属性
scope可应用再视图和控制器上
如何使用
再创建ag控制器是，可以将$scope对象当作一个参数传递
控制器中添加$scope对象时，视图(html)可以获取了这些属性
视图中，不需要添加$scope前缀，只需要添加属性名即可。


ag应用组成如下
view(视图) 即html
model（模型), 当前视图中可用的数据
controller(控制器)，即js函数，可以添加或修改属性
scope是模型，是一个js对象，带有属性和方法，这些属性和方法可以再视图和控制器中使用

scope作用范围
当我们使用ng-repeat时，每个重复项都访问了当前的重复对象


过滤器
可以使用一个管道字符(|)添加到表达式和指令中
过滤器可用于转换数据
currency 格式化数字为货币格式
filter 从数组顶中选择一个子集
lowercase 格式化字符串为小写
orderBy 根据某表达式排列数组
uppercase 格式化字符串为大写

Angular的很多服务，在DOM中有对应的对象，那为什么不使用这些对象，而是要用服务呢？
因为这些服务可以获取到Angular应用声明周期的每一个阶段，
并且和$watch整合，让Angular可以监控应用，处理事件变化。
普通的DOM对象则不能在Angular应用声明周期中和应用整合。
ag会一直监控应用，处理事件变化，ag使用$location 服务比使用window.location对象更好

$http服务
发送请求，应用响应访问器传送过来的数据
废弃声明 (v1.5)
v1.5 中$http 的 success 和 error 方法已废弃。使用 then 方法替代。

ng-options 创建选择框
列表项通过对象和数组循环输出
repeat指令是通过数组来循环html代码来创建下拉列表，但是options指令更适合创建下拉列表
因为options的选项是一个对象，repeat是一个字符串

ng-disabled 控制是否可操作
ng-show 和  ng-hide也是通过改变样式进行显示和隐藏的，只不过两个使用方式相反
ng-if是通过删除dom进行的

ag事件
ng-click指令定义了ag点击事件
使用的时候 ng-click="func()"


ag模块
模块定义了一个应用程序
模块是应用程序中不同部分的容器
app.module('app', [])中的[]参数用于定义模块的依赖关系

ag表单是输入控件的集合


自 AngularJS 1.7 之后移除 angular.lowercase 和 angular.uppercase 方法, 
改为 angular.$$lowercase 和 angular.$$uppercase


angularJS包含，使用ng-include指令来包含html内容
body ng-app=""
	div ng-include="'runoob.htm'"
	
runoob.htm 文件代码：
<h1>菜鸟教程</h1>
<p>这是一个被包含的 HTML 页面，使用 ng-include 指令来实现！</p>

跨域包含
默认情况下， ng-include 指令不允许包含其他域名的文件。
如果你需要包含其他域名的文件，你需要设置域名访问白名单：
<!DOCTYPE html>
<html>
<meta charset="utf-8">
<script src="https://cdn.staticfile.org/angular.js/1.4.6/angular.min.js"></script>
<body ng-app="myApp">
 
<div ng-include="'https://c.runoob.com/runoobtest/angular_include.php'"></div>

<script>
var app = angular.module('myApp', [])
app.config(function($sceDelegateProvider) {
    $sceDelegateProvider.resourceUrlWhitelist([
        'https://c.runoob.com/runoobtest/**'
    ]);
});
</script>
<p>你需要设置服务端允许跨域访问，设置方法可参考 <a target="_blank" href="/w3cnote/php-ajax-cross-border.html">PHP Ajax 跨域问题最佳解决方案</a>。
</body>
</html>

此外，你还需要设置服务端允许跨域访问






动画
ag使用动画需要引入angular-animate.min.js库
<script src="http://cdn.static.runoob.com/libs/angular.js/1.4.6/angular-animate.min.js"></script>
此外还需要再应用中使用模型ngAnimate
<body ng-app="ngAnimate">

依赖注入
一个或者更多的依赖(或者服务) 被注入(或者通过引用传递)到一个对立的对象(或者客户端)中，任何成为了该客户端状态的一部分。
简单来说就是没事你不要来找我，有事我会去找你
AG提供很好的依赖注入机制，一下5个核心组件用来作为依赖注入：
1.value 2. factory 3. service 4.provider 5.constant

value 是一个简单的js对象，用于向控制器传递值(配置阶段):

factory 是一个函数用于返回值，再service和controller需要时创建。通常我们使用factory函数来计算或返回值。

provider ag中通过provider创建一个service、factory等(配置阶段).
provider中提供 了一个factory方法get(), 他用于返回value/service/factory

constant (常量)用来配置阶段传递数值，注意这个常量在配置阶段是不可用的。


路由
通常我们的url形式http://runoob.com/first/page，
但是在单页面web应用中ag通过#!+标记实现
例子：
http://runoob.com/#!/first
http://runoob.com/#!/second
http://runoob.com/#!/third

1.6之前的版本是通过#+标记实现路由
当我们点击以上的任意一个链接时，向服务端请的地址都是一样的 (http://runoob.com/)。 
因为 #! 号之后的内容在向服务端请求时会被浏览器忽略掉。 所以我们就需要在客户端实现 #! 号后面内容的功能实现。
 AngularJS 路由就通过 #! + 标记 帮助我们区分不同的逻辑页面并将不同的页面绑定到对应的控制器上。